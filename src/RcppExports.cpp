// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// cholesky
Eigen::MatrixXd cholesky(const Eigen::Map<Eigen::MatrixXd> A);
RcppExport SEXP _hzz_cholesky(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(cholesky(A));
    return rcpp_result_gen;
END_RCPP
}
// applyWhitenTransform
Rcpp::List applyWhitenTransform(const Eigen::Map<Eigen::MatrixXd> constraint_direc, const Eigen::Map<Eigen::VectorXd> constraint_bound, const Eigen::Map<Eigen::MatrixXd> cholesky_factor, const Eigen::Map<Eigen::VectorXd> unconstrained_mean, bool prec_parametrized);
RcppExport SEXP _hzz_applyWhitenTransform(SEXP constraint_direcSEXP, SEXP constraint_boundSEXP, SEXP cholesky_factorSEXP, SEXP unconstrained_meanSEXP, SEXP prec_parametrizedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type constraint_direc(constraint_direcSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type constraint_bound(constraint_boundSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type cholesky_factor(cholesky_factorSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type unconstrained_mean(unconstrained_meanSEXP);
    Rcpp::traits::input_parameter< bool >::type prec_parametrized(prec_parametrizedSEXP);
    rcpp_result_gen = Rcpp::wrap(applyWhitenTransform(constraint_direc, constraint_bound, cholesky_factor, unconstrained_mean, prec_parametrized));
    return rcpp_result_gen;
END_RCPP
}
// whitenPosition
Eigen::VectorXd whitenPosition(const Eigen::Map<Eigen::VectorXd> position, const Eigen::Map<Eigen::MatrixXd> constraint_direc, const Eigen::Map<Eigen::VectorXd> constraint_bound, const Eigen::Map<Eigen::MatrixXd> cholesky_factor, const Eigen::Map<Eigen::VectorXd> unconstrained_mean, bool prec_parametrized);
RcppExport SEXP _hzz_whitenPosition(SEXP positionSEXP, SEXP constraint_direcSEXP, SEXP constraint_boundSEXP, SEXP cholesky_factorSEXP, SEXP unconstrained_meanSEXP, SEXP prec_parametrizedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type position(positionSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type constraint_direc(constraint_direcSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type constraint_bound(constraint_boundSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type cholesky_factor(cholesky_factorSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type unconstrained_mean(unconstrained_meanSEXP);
    Rcpp::traits::input_parameter< bool >::type prec_parametrized(prec_parametrizedSEXP);
    rcpp_result_gen = Rcpp::wrap(whitenPosition(position, constraint_direc, constraint_bound, cholesky_factor, unconstrained_mean, prec_parametrized));
    return rcpp_result_gen;
END_RCPP
}
// unwhitenPosition
Eigen::VectorXd unwhitenPosition(const Eigen::VectorXd position, const Eigen::Map<Eigen::MatrixXd> cholesky_factor, const Eigen::Map<Eigen::VectorXd> unconstrained_mean, bool prec_parametrized);
RcppExport SEXP _hzz_unwhitenPosition(SEXP positionSEXP, SEXP cholesky_factorSEXP, SEXP unconstrained_meanSEXP, SEXP prec_parametrizedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type position(positionSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type cholesky_factor(cholesky_factorSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type unconstrained_mean(unconstrained_meanSEXP);
    Rcpp::traits::input_parameter< bool >::type prec_parametrized(prec_parametrizedSEXP);
    rcpp_result_gen = Rcpp::wrap(unwhitenPosition(position, cholesky_factor, unconstrained_mean, prec_parametrized));
    return rcpp_result_gen;
END_RCPP
}
// simulateWhitenedDynamics
Rcpp::List simulateWhitenedDynamics(const Eigen::Map<Eigen::VectorXd> initial_position, const Eigen::Map<Eigen::VectorXd> initial_momentum, const Eigen::Map<Eigen::MatrixXd> constraint_direc, const Eigen::Map<Eigen::VectorXd> constraint_row_norm_sq, const Eigen::Map<Eigen::VectorXd> constraint_bound, double total_time, bool diagnostic_mode);
RcppExport SEXP _hzz_simulateWhitenedDynamics(SEXP initial_positionSEXP, SEXP initial_momentumSEXP, SEXP constraint_direcSEXP, SEXP constraint_row_norm_sqSEXP, SEXP constraint_boundSEXP, SEXP total_timeSEXP, SEXP diagnostic_modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type initial_position(initial_positionSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type initial_momentum(initial_momentumSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type constraint_direc(constraint_direcSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type constraint_row_norm_sq(constraint_row_norm_sqSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type constraint_bound(constraint_boundSEXP);
    Rcpp::traits::input_parameter< double >::type total_time(total_timeSEXP);
    Rcpp::traits::input_parameter< bool >::type diagnostic_mode(diagnostic_modeSEXP);
    rcpp_result_gen = Rcpp::wrap(simulateWhitenedDynamics(initial_position, initial_momentum, constraint_direc, constraint_row_norm_sq, constraint_bound, total_time, diagnostic_mode));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_hello_world
List rcpp_hello_world();
RcppExport SEXP _hzz_rcpp_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpp_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// createEngine
Rcpp::List createEngine(int dimension, std::vector<double>& mask, std::vector<double>& observed, std::vector<double>& parameterSign, long flags, long info, long seed);
RcppExport SEXP _hzz_createEngine(SEXP dimensionSEXP, SEXP maskSEXP, SEXP observedSEXP, SEXP parameterSignSEXP, SEXP flagsSEXP, SEXP infoSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type dimension(dimensionSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type observed(observedSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type parameterSign(parameterSignSEXP);
    Rcpp::traits::input_parameter< long >::type flags(flagsSEXP);
    Rcpp::traits::input_parameter< long >::type info(infoSEXP);
    Rcpp::traits::input_parameter< long >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(createEngine(dimension, mask, observed, parameterSign, flags, info, seed));
    return rcpp_result_gen;
END_RCPP
}
// createNutsEngine
Rcpp::List createNutsEngine(int dimension, std::vector<double>& mask, std::vector<double>& observed, std::vector<double>& parameterSign, long flags, long info, long seed, bool randomFlg, double stepSize, NumericVector& mean, NumericVector& precision);
RcppExport SEXP _hzz_createNutsEngine(SEXP dimensionSEXP, SEXP maskSEXP, SEXP observedSEXP, SEXP parameterSignSEXP, SEXP flagsSEXP, SEXP infoSEXP, SEXP seedSEXP, SEXP randomFlgSEXP, SEXP stepSizeSEXP, SEXP meanSEXP, SEXP precisionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type dimension(dimensionSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type observed(observedSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type parameterSign(parameterSignSEXP);
    Rcpp::traits::input_parameter< long >::type flags(flagsSEXP);
    Rcpp::traits::input_parameter< long >::type info(infoSEXP);
    Rcpp::traits::input_parameter< long >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< bool >::type randomFlg(randomFlgSEXP);
    Rcpp::traits::input_parameter< double >::type stepSize(stepSizeSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type precision(precisionSEXP);
    rcpp_result_gen = Rcpp::wrap(createNutsEngine(dimension, mask, observed, parameterSign, flags, info, seed, randomFlg, stepSize, mean, precision));
    return rcpp_result_gen;
END_RCPP
}
// setMean
void setMean(SEXP sexp, NumericVector& mean);
RcppExport SEXP _hzz_setMean(SEXP sexpSEXP, SEXP meanSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type sexp(sexpSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type mean(meanSEXP);
    setMean(sexp, mean);
    return R_NilValue;
END_RCPP
}
// setPrecision
void setPrecision(SEXP sexp, NumericVector& precision);
RcppExport SEXP _hzz_setPrecision(SEXP sexpSEXP, SEXP precisionSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type sexp(sexpSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type precision(precisionSEXP);
    setPrecision(sexp, precision);
    return R_NilValue;
END_RCPP
}
// doSomething
void doSomething(SEXP sexp, std::vector<double>& data);
RcppExport SEXP _hzz_doSomething(SEXP sexpSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type sexp(sexpSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type data(dataSEXP);
    doSomething(sexp, data);
    return R_NilValue;
END_RCPP
}
// getNextEvent
Rcpp::List getNextEvent(SEXP sexp, NumericVector& position, NumericVector& velocity, NumericVector& action, NumericVector& logpdfGradient, NumericVector& momentum);
RcppExport SEXP _hzz_getNextEvent(SEXP sexpSEXP, SEXP positionSEXP, SEXP velocitySEXP, SEXP actionSEXP, SEXP logpdfGradientSEXP, SEXP momentumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type sexp(sexpSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type position(positionSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type velocity(velocitySEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type action(actionSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type logpdfGradient(logpdfGradientSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type momentum(momentumSEXP);
    rcpp_result_gen = Rcpp::wrap(getNextEvent(sexp, position, velocity, action, logpdfGradient, momentum));
    return rcpp_result_gen;
END_RCPP
}
// oneIteration
Rcpp::List oneIteration(SEXP sexp, NumericVector& position, NumericVector& momentum, double time);
RcppExport SEXP _hzz_oneIteration(SEXP sexpSEXP, SEXP positionSEXP, SEXP momentumSEXP, SEXP timeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type sexp(sexpSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type position(positionSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type momentum(momentumSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    rcpp_result_gen = Rcpp::wrap(oneIteration(sexp, position, momentum, time));
    return rcpp_result_gen;
END_RCPP
}
// oneNutsIteration
Rcpp::List oneNutsIteration(SEXP sexp, NumericVector& position, NumericVector& momentum, double stepsize);
RcppExport SEXP _hzz_oneNutsIteration(SEXP sexpSEXP, SEXP positionSEXP, SEXP momentumSEXP, SEXP stepsizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type sexp(sexpSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type position(positionSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type momentum(momentumSEXP);
    Rcpp::traits::input_parameter< double >::type stepsize(stepsizeSEXP);
    rcpp_result_gen = Rcpp::wrap(oneNutsIteration(sexp, position, momentum, stepsize));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_hzz_cholesky", (DL_FUNC) &_hzz_cholesky, 1},
    {"_hzz_applyWhitenTransform", (DL_FUNC) &_hzz_applyWhitenTransform, 5},
    {"_hzz_whitenPosition", (DL_FUNC) &_hzz_whitenPosition, 6},
    {"_hzz_unwhitenPosition", (DL_FUNC) &_hzz_unwhitenPosition, 4},
    {"_hzz_simulateWhitenedDynamics", (DL_FUNC) &_hzz_simulateWhitenedDynamics, 7},
    {"_hzz_rcpp_hello_world", (DL_FUNC) &_hzz_rcpp_hello_world, 0},
    {"_hzz_createEngine", (DL_FUNC) &_hzz_createEngine, 7},
    {"_hzz_createNutsEngine", (DL_FUNC) &_hzz_createNutsEngine, 11},
    {"_hzz_setMean", (DL_FUNC) &_hzz_setMean, 2},
    {"_hzz_setPrecision", (DL_FUNC) &_hzz_setPrecision, 2},
    {"_hzz_doSomething", (DL_FUNC) &_hzz_doSomething, 2},
    {"_hzz_getNextEvent", (DL_FUNC) &_hzz_getNextEvent, 6},
    {"_hzz_oneIteration", (DL_FUNC) &_hzz_oneIteration, 4},
    {"_hzz_oneNutsIteration", (DL_FUNC) &_hzz_oneNutsIteration, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_hzz(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
